// Generates GlassMapper models

Log.Debug($"Emitting GlassMapper templates for {ConfigurationName}...");

Code.AppendLine($@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

{RenderTemplates()}
");

public string RenderTemplates()
{
    var localCode = new System.Text.StringBuilder();

    foreach (var template in Templates)
    {
        localCode.AppendLine($@"
namespace {template.Namespace}
{{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Glass.Mapper.Sc.Configuration.Attributes;
    using Glass.Mapper.Sc.Fields;
    using global::Sitecore.Data;

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    ///[RepresentsSitecoreTemplateAttribute(""{{{template.Id}}}"", """", ""{ConfigurationName}"")]
    [SitecoreType(TemplateId = {template.Namespace}.Constants.{template.CodeName}.TemplateIdString)]
    [GeneratedCode(""Leprechaun"", ""1.0.0.0"")]
    public partial interface I{template.CodeName} : {GetBaseInterfaces(template)}
    {{
        {RenderInterfaceFields(template)}
    }}

}}

namespace {template.Namespace}.Constants
{{
    using global::Sitecore.Data;
    using System.CodeDom.Compiler;

    [GeneratedCode(""Leprechaun"", ""1.0.0.0"")]
    public struct {template.CodeName}
    {{
        public const string TemplateIdString = ""{template.Id}"";
        public static readonly ID TemplateId = new ID(TemplateIdString);

        { RenderConstantFields(template) }
    }}
}}");
    }

    return localCode.ToString();
}

public string GetBaseInterfaces(TemplateCodeGenerationMetadata template)
{
    var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

    foreach (var baseTemplate in template.BaseTemplates)
    {
        bases.Add($"global::{baseTemplate.Namespace}.I{baseTemplate.CodeName}");
    }

    if (bases.Count == 0)
    {
        // IStandardTemplateItem only needed when no other bases exist otherwise irrelevant by transitive inheritance
        bases.Add("IGlassBase");
    }

    return string.Join(", ", bases);
}

public string RenderInterfaceFields(TemplateCodeGenerationMetadata template)
{
    var localCode = new System.Text.StringBuilder();

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        /// <summary>{field.HelpText}</summary>
        [SitecoreField(FieldName = {template.Namespace}.Constants.{template.CodeName}.Fields.{field.CodeName}_FieldName)]
        {GetFieldType(field)} {field.CodeName} {{ get; }}");
    }

    return localCode.ToString();
}

public string GetFieldType(TemplateFieldCodeGenerationMetadata field)
{
    switch (field.Type.ToLower())
    {
        case "tristate":
            return "TriState";
        case "checkbox":
            return "bool";

        case "date":
        case "datetime":
            return "DateTime";

        case "number":
            return "float";

        case "integer":
            return "int";

        case "treelist":
            return "IEnumerable<Guid>";
        case "treelistex":
        case "treelist descriptive":
        case "checklist":
        case "multilist":
            return "IEnumerable<Guid>";
        case "grouped droplink":
        case "droplink":
        case "lookup":
        case "droptree":
        case "reference":
        case "tree":
            return "Guid";

        case "file":
            return "File";

        case "image":
            return "Image";

        case "rich text":
        case "html":
            return "string";

        case "general link":
            return "Link";

        case "single-line text":
        case "multi-line text":
        case "frame":
        case "text":
        case "memo":
        case "droplist":
        case "grouped droplist":
        case "valuelookup":
            return "string";
        default:
            return "string";
    }
}

// Generates Glass Constants File

public string RenderConstantFields(TemplateCodeGenerationMetadata template)
{
    if (template.OwnFields.Length == 0)
    {
        return string.Empty;
    }

    var localCode = new System.Text.StringBuilder();

    localCode.Append($@"
        public struct Fields
        {{");

    foreach (var field in template.OwnFields)
    {
        localCode.AppendLine($@"
        public static readonly ID {field.CodeName} = new ID(""{field.Id}"");
        public const string {field.CodeName}_FieldName = ""{field.Name}"";");
    }

    localCode.Append(@"
        }");

    return localCode.ToString();
}