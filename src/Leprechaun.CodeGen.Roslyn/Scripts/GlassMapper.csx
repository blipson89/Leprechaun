// Generates GlassMapper models
using System;
using System.Linq;
using System.Collections.Generic;

Log.Debug($"Emitting GlassMapper templates for {ConfigurationName}...");

Code.Append($@"
#pragma warning disable 1591
#pragma warning disable 0108
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Leprechaun.
//     
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;   
using System.CodeDom.Compiler;
using System.Collections.Generic;
using global::Glass.Mapper.Sc.Configuration.Attributes;
using global::Glass.Mapper.Sc.Fields;
using System.Diagnostics.CodeAnalysis;
using global::Sitecore.Data;
{RenderTemplates()}
");

public string RenderTemplates()
{
	var localCode = new System.Text.StringBuilder();
	foreach (var template in Templates)
	{
		localCode.Append($@"
namespace {template.RootNamespace}
{{");
		break;
	}
	foreach (var template in Templates)
	{
		localCode.AppendLine($@"

    /// <summary>Controls the appearance of the inheriting template in site navigation.</summary>
    [SitecoreType(TemplateId = {template.RootNamespace}.{template.CodeName}Constants.TemplateIdString)]
	[GeneratedCode(""Leprechaun"", ""{Version}"")]
    public partial interface I{template.CodeName} : {GetBaseInterfaces(template)}
    {{{RenderInterfaceFields(template)}
    }}
    
    [ExcludeFromCodeCoverage]
	[GeneratedCode(""Leprechaun"", ""{Version}"")]
    public struct {template.CodeName}Constants
    {{
        public const string TemplateIdString = ""{template.Id}"";
        public static readonly ID TemplateId = new ID(TemplateIdString);
        public const string TemplateName = ""{template.Name}"";
        { RenderConstantFields(template) }
    }}
    
    [ExcludeFromCodeCoverage]
    [GeneratedCode(""Leprechaun"", ""{Version}"")]
    public partial class {template.CodeName} : GlassBase, I{template.CodeName}
    {{{ RenderClassFields(template) }
    }}");
	}

	if (Templates.Any())
	{
		localCode.Append($@"
}}");
	}

	return localCode.ToString();
}

public string RenderClassFields(TemplateCodeGenerationMetadata template)
{
	var localCode = new System.Text.StringBuilder();

	foreach (var field in template.AllFields)
	{
		localCode.Append($@"
        /// <summary>
        /// Represents {field.Name} field
        /// <para>Path: {field.Path}</para> 
        /// <para>ID: {field.Id}</para> 
        /// </summary>
        [SitecoreField(FieldName = {template.CodeName}Constants.{field.CodeName}FieldName)]
        public virtual {GetFieldType(field)} {field.CodeName} {{ get; set; }}
        ");

	}

	return localCode.ToString().TrimEnd();
}


public string GetBaseInterfaces(TemplateCodeGenerationMetadata template)
{
	var bases = new System.Collections.Generic.List<string>(template.BaseTemplates.Count + 1);

	foreach (var baseTemplate in template.BaseTemplates)
	{
		bases.Add($"global::{baseTemplate.RootNamespace}.I{baseTemplate.CodeName}");
	}

	if (bases.Count == 0)
	{
		// IGlassBase only needed when no other bases exist otherwise irrelevant by transitive inheritance
		bases.Add("IGlassBase");
	}

	return string.Join(", ", bases);
}

public string RenderInterfaceFields(TemplateCodeGenerationMetadata template)
{
	var localCode = new System.Text.StringBuilder();

	foreach (var field in template.OwnFields)
	{
		localCode.AppendLine($@"
        /// <summary>{field.HelpText.Replace(System.Environment.NewLine, System.Environment.NewLine + "        /// ")}</summary>
        [SitecoreField(FieldName = {template.RootNamespace}.{template.CodeName}Constants.{field.CodeName}FieldName)]
        {GetFieldType(field)} {field.CodeName} {{ get; set; }}");
	}

	return localCode.ToString().TrimEnd();
}

public string RenderConstantFields(TemplateCodeGenerationMetadata template)
{
	var localCode = new System.Text.StringBuilder();

	foreach (var field in template.AllFields)
	{
		localCode.AppendLine($@"
        public static readonly ID {field.CodeName}FieldId = new ID(""{field.Id}"");
        public const string {field.CodeName}FieldName = ""{field.CodeName}"";");
	}

	return localCode.ToString().TrimEnd();
}

public string GetFieldType(TemplateFieldCodeGenerationMetadata field)
{
	switch (field.Type.ToLower())
	{
		case "tristate":
			return "TriState";
		case "checkbox":
			return "bool";

		case "date":
		case "datetime":
			return "DateTime";

		case "number":
			return "float";

		case "integer":
			return "int";

		case "treelist":
			return "IEnumerable<Guid>";
		case "treelistex":
		case "treelist descriptive":
		case "checklist":
		case "multilist":
			return "IEnumerable<Guid>";
		case "grouped droplink":
		case "droplink":
		case "lookup":
		case "droptree":
		case "reference":
		case "tree":
			return "Guid";

		case "file":
			return "File";

		case "image":
			return "ExtendedImage";

		case "rich text":
		case "html":
			return "string";

		case "general link":
			return "Link";

		case "name value list":
			return "System.Collections.Specialized.NameValueCollection";

		case "single-line text":
		case "multi-line text":
		case "frame":
		case "text":
		case "memo":
		case "droplist":
		case "grouped droplist":
		case "valuelookup":
			return "string";
		default:
			return "string";
	}
}